{"version":3,"sources":["components/layout/Header.tsx","components/form/Form.tsx","components/form/Output.tsx","components/form/Options.tsx","components/app/App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","Form","onSubmit","useState","input","setInput","className","action","event","preventDefault","name","id","cols","rows","onChange","target","value","placeholder","type","Output","output","Options","options","optionId","handleChange","currentTarget","map","option","index","htmlFor","string","charAt","toUpperCase","slice","key","App","outputString","setOutputString","selectedOptions","setSelectedOptions","error","setError","actionToSplitCommand","onRadioChange","length","inputString","errorReport","inputCommand","outputCommand","Array","from","Set","split","join","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0f355605.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Header() {\r\n   \r\n   return (\r\n      <header>\r\n         <h1>Duplicate Remover</h1>\r\n      </header>\r\n   )\r\n}\r\n","import React, { SyntheticEvent, FunctionComponent, useState } from \"react\";\r\n\r\ninterface Props {\r\n   onSubmit: any;\r\n   // optionType: string;\r\n}\r\n\r\nexport const Form: FunctionComponent<Props> = ({ onSubmit }) => {\r\n   const [input, setInput] = useState(\"\");\r\n   // const actionToSplitCommand = (action: string): string => {\r\n   //    if (action === \"return\") return \"\\n\";\r\n   //    if (action === \"comma\") return \",\";\r\n   //    if (action === \"space\") return \" \";\r\n   //    return \"\\n\";\r\n   // };\r\n   const handleSubmit = (event: SyntheticEvent) => {\r\n      event.preventDefault();\r\n      // let strArray = Array.from(new Set(input.split(actionToSplitCommand(optionType)))); // Removes duplicates\r\n      onSubmit(input);\r\n   };\r\n   const handleChange = (\r\n      event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n   ) => {\r\n      setInput(event.target.value);\r\n   };\r\n   return (\r\n      <form className=\"Form\" action=\"submit\" onSubmit={handleSubmit}>\r\n         <textarea\r\n            name=\"email_input\"\r\n            id=\"email_input\"\r\n            cols={30}\r\n            rows={5}\r\n            onChange={handleChange}\r\n            placeholder={\"Place your list here, in your chosen format\"}\r\n         ></textarea>\r\n         <input type=\"submit\" value=\"Filter\" />\r\n      </form>\r\n   );\r\n};\r\n\r\nexport default Form;\r\n","import React, { useState } from \"react\";\r\n\r\ninterface Props {\r\n   output: string;\r\n}\r\n\r\nexport const Output = ({ output }: Props) => {\r\n   // const [isCopied, setIsCopied] = useState(false);\r\n   return (\r\n      <div className=\"output-container\">\r\n         <textarea\r\n            name=\"output_field\"\r\n            id=\"output_field\"\r\n            cols={30}\r\n            rows={5}\r\n            value={output}\r\n         ></textarea>\r\n         {/* <button className={isCopied ? \"copied\" : \"\"}>{isCopied ? \"Copied\" : \"Copy to clipboard\"}</button> */}\r\n      </div>\r\n   );\r\n};\r\n","import React from \"react\";\r\n\r\ninterface Props {\r\n   options: string[];\r\n   optionId: string;\r\n   onChange: any;\r\n}\r\n\r\n\r\nfunction Options({ options, optionId, onChange }: Props) {\r\n   // const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n   //    onChange(optionId, event.target.value);\r\n   // };\r\n   const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n      onChange(optionId, event.currentTarget.value);\r\n   };\r\n   const capitalizeFirstLetter = (string: string): string => {\r\n      return string.charAt(0).toUpperCase() + string.slice(1);\r\n   } \r\n   // const typeToSymbol = (type:string):string => {\r\n   //    switch (type) {\r\n   //       case \"return\":\r\n   //          return \"\t&#9166;\"\r\n   //       case   \r\n      \r\n   //       default:\r\n   //          break;\r\n   //    }\r\n   // }\r\n   return (\r\n      <div className=\"option-list\">\r\n         {/* <select onChange={handleChange}>\r\n            {options.map((option: string, index: number) => (\r\n               <option key={index} value={option}>\r\n                  {option}\r\n               </option>\r\n            ))}\r\n         </select> */}\r\n         {options.map((option: string, index: number) => (\r\n            <span>\r\n               <label htmlFor={`${optionId}_${option}`}>{capitalizeFirstLetter(option)}</label>\r\n               <input\r\n                  key={index}\r\n                  type=\"radio\"\r\n                  id={`${optionId}_${option}`}\r\n                  value={option}\r\n                  name={optionId}\r\n                  onChange={handleChange}\r\n               />\r\n            </span>\r\n         ))}\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default Options;\r\n","import \"../../styles/App.scss\";\nimport React, { useState } from \"react\";\nimport Header from \"../layout/Header\";\nimport Form from \"../form/Form\";\nimport { Output } from \"../form/Output\";\nimport Options from \"../form/Options\";\n\nfunction App() {\n   const options = [\"return\", \"comma\", \"space\"];\n   const [outputString, setOutputString] = useState(\"\");\n   const [selectedOptions, setSelectedOptions] = useState({\n      input: \"\",\n      output: \"\",\n   });\n   const [error, setError] = useState({\n      input: \"\",\n      output: \"\",\n   });\n   const actionToSplitCommand = (action: string): string => {\n      if (action === \"return\") return \"\\n\";\n      if (action === \"comma\") return \",\";\n      if (action === \"space\") return \" \";\n      else return \"\\n\";\n   };\n   const onSubmit = (inputString: string) => {\n      let errorReport = {\n         input: \"\",\n         output: \"\"\n      };\n      if (!selectedOptions.input) errorReport.input = \"Please choose one..\";\n      if (!selectedOptions.output) errorReport.output = \"Please choose one..\"\n      if (selectedOptions.input.length && selectedOptions.output.length) {\n         \n         let inputCommand = actionToSplitCommand(selectedOptions.input);\n         let outputCommand = actionToSplitCommand(selectedOptions.output);\n         let strArray = Array.from(new Set(inputString.split(inputCommand)));\n         // Removes duplicates\n         let output = strArray.join(outputCommand);\n         console.log(\"onSubmit -> output\", output);\n         setOutputString(output);\n      } else {\n         setError(errorReport);\n      }\n   };\n   const onRadioChange = (optionId: string, action: string) => {\n      setSelectedOptions({ ...selectedOptions, [optionId]: action });\n      setError({ ...error, [optionId]: \"\" });\n   };\n   return (\n      <div className=\"App\">\n         <Header />\n         <Options options={options} optionId=\"input\" onChange={onRadioChange} />\n         {error.input.length ? <p>{error.input}</p> : null}\n         <Form onSubmit={onSubmit} />\n         <Options options={options} optionId=\"output\" onChange={onRadioChange} />\n         {error.output.length ? <p>{error.output}</p> : null}\n         <Output output={outputString} />\n      </div>\n   );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}