{"version":3,"sources":["components/layout/Header.tsx","components/form/Form.tsx","components/form/Output.tsx","components/form/Options.tsx","components/app/App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","Form","onSubmit","joinCommand","useState","input","setInput","className","action","event","preventDefault","name","id","cols","rows","onChange","target","value","placeholder","join","type","Output","output","isCopied","setIsCopied","outputRef","useRef","ref","length","onClick","current","select","document","execCommand","currentTarget","focus","setTimeout","Options","options","optionId","selectedOption","handleChange","map","option","index","htmlFor","string","charAt","toUpperCase","slice","key","checked","App","outputString","setOutputString","selectedOptions","setSelectedOptions","error","setError","actionToSplitCommand","onRadioChange","inputString","errorReport","inputCommand","outputCommand","Array","from","Set","split","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.9c05f90f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Header() {\r\n   \r\n   return (\r\n      <header>\r\n         <h1>Duplicate Remover</h1>\r\n      </header>\r\n   )\r\n}\r\n","import React, { SyntheticEvent, FunctionComponent, useState } from \"react\";\r\n\r\ninterface Props {\r\n   onSubmit: any;\r\n   joinCommand: string;\r\n}\r\n\r\nexport const Form: FunctionComponent<Props> = ({ onSubmit, joinCommand }) => {\r\n   const [input, setInput] = useState(\"\");\r\n   const exampleArr = [\"A\",\"list\",\"like\",\"this\"];\r\n   const handleSubmit = (event: SyntheticEvent) => {\r\n      event.preventDefault();\r\n      onSubmit(input);\r\n   };\r\n   const handleChange = (\r\n      event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n   ) => {\r\n      setInput(event.target.value);\r\n   };\r\n   return (\r\n      <form className=\"Form\" action=\"submit\" onSubmit={handleSubmit}>\r\n         <textarea\r\n            name=\"email_input\"\r\n            id=\"email_input\"\r\n            cols={30}\r\n            rows={5}\r\n            onChange={handleChange}\r\n            placeholder={\"Place your list here. E.g. \\n\" + exampleArr.join(joinCommand)}\r\n         ></textarea>\r\n         <input type=\"submit\" value=\"Filter\" />\r\n      </form>\r\n   );\r\n};\r\n\r\nexport default Form;\r\n","import React, { useState, useRef } from \"react\";\r\n\r\ninterface Props {\r\n   output: string;\r\n}\r\n\r\nexport const Output = ({ output }: Props) => {\r\n   const [isCopied, setIsCopied] = useState(false);\r\n   const outputRef = useRef<HTMLTextAreaElement>(null);\r\n   const copyToClipboard = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n      if (outputRef && outputRef.current) {\r\n         outputRef.current.select();\r\n         document.execCommand('copy');\r\n         event.currentTarget.focus();\r\n         setIsCopied(true);\r\n         setTimeout(() => {\r\n            setIsCopied(false);\r\n         }, 1500);\r\n      }\r\n         \r\n   };\r\n   return (\r\n      <div className=\"output-container\">\r\n         <textarea\r\n            name=\"output_field\"\r\n            id=\"output_field\"\r\n            ref={outputRef}\r\n            cols={30}\r\n            rows={5}\r\n            value={output}\r\n         ></textarea>\r\n         {output.length ? <button\r\n            // disabled={output.length ? false : true}\r\n            className={isCopied ? \"copied\" : \"\"}\r\n            // style={isCopied ? { backgroundColor: \"green\", color: \"white\" } : {}}\r\n            onClick={copyToClipboard}\r\n         >\r\n            {isCopied ? \"Copied!\" : \"Copy to clipboard\"}\r\n         </button> : null}\r\n      </div>\r\n   );\r\n};\r\n","import React from \"react\";\r\n\r\ninterface Props {\r\n   options: string[];\r\n   optionId: string;\r\n   onChange: any;\r\n   selectedOption: string;\r\n}\r\n\r\n\r\nfunction Options({ options, optionId, onChange, selectedOption }: Props) {\r\n   const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n      onChange(optionId, event.currentTarget.value);\r\n   };\r\n   const capitalizeFirstLetter = (string: string): string => {\r\n      return string.charAt(0).toUpperCase() + string.slice(1);\r\n   } \r\n   return (\r\n      <div className=\"option-list\">\r\n         {/* <select onChange={handleChange}>\r\n            {options.map((option: string, index: number) => (\r\n               <option key={index} value={option}>\r\n                  {option}\r\n               </option>\r\n            ))}\r\n         </select> */}\r\n         {options.map((option: string, index: number) => (\r\n            <span>\r\n               <label htmlFor={`${optionId}_${option}`}>{capitalizeFirstLetter(option)}</label>\r\n               <input\r\n                  key={index}\r\n                  type=\"radio\"\r\n                  id={`${optionId}_${option}`}\r\n                  value={option}\r\n                  name={optionId}\r\n                  onChange={handleChange}\r\n                  checked={selectedOption === option}\r\n               />\r\n            </span>\r\n         ))}\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default Options;\r\n","import \"../../styles/App.scss\";\nimport React, { useState } from \"react\";\nimport Header from \"../layout/Header\";\nimport Form from \"../form/Form\";\nimport { Output } from \"../form/Output\";\nimport Options from \"../form/Options\";\n\nfunction App() {\n   const options = [\"return\", \"comma\", \"comma + space\", \"space\"]; //Added for usability\n   const [outputString, setOutputString] = useState(\"\");\n   const [selectedOptions, setSelectedOptions] = useState({\n      input: \"space\",\n      output: \"space\",\n   });\n   const [error, setError] = useState({\n      input: \"\",\n      output: \"\",\n   });\n   const actionToSplitCommand = (action: string): string => {\n      if (action === \"return\") return \"\\n\";\n      if (action === \"comma\") return \",\";\n      if (action === \"space\") return \" \";\n      if(action === \"comma + space\") return \", \"\n      else return \"\\n\";\n   };\n   const onSubmit = (inputString: string) => {\n      let errorReport = {\n         input: \"\",\n         output: \"\"\n      };\n      if (!selectedOptions.input) errorReport.input = \"Please choose one..\";\n      if (!selectedOptions.output) errorReport.output = \"Please choose one..\"\n      if (selectedOptions.input.length && selectedOptions.output.length) {\n         \n         let inputCommand = actionToSplitCommand(selectedOptions.input);\n         let outputCommand = actionToSplitCommand(selectedOptions.output);\n         let strArray = Array.from(new Set(inputString.split(inputCommand)));\n         // Removes duplicates\n         let output = strArray.join(outputCommand);\n         setOutputString(output);\n      } else {\n         setError(errorReport);\n      }\n   };\n   const onRadioChange = (optionId: string, action: string) => {\n      setSelectedOptions({ ...selectedOptions, [optionId]: action });\n      setError({ ...error, [optionId]: \"\" });\n   };\n   return (\n      <div className=\"App\">\n         <Header />\n         <Options options={options} optionId=\"input\" onChange={onRadioChange} selectedOption={selectedOptions.input} />\n         {error.input.length ? <p>{error.input}</p> : null}\n         <Form onSubmit={onSubmit} joinCommand={actionToSplitCommand(selectedOptions.input)} />\n         <Options options={options} optionId=\"output\" onChange={onRadioChange} selectedOption={selectedOptions.output} />\n         {error.output.length ? <p>{error.output}</p> : null}\n         <Output output={outputString} />\n      </div>\n   );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}